<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBoxHystory.Text" xml:space="preserve">
    <value>Версия 2.0.1 (07.06.2018)

• Возможность изменять ключ вручную

Версия 2.0 (28.03.2018)

• Суточный отчёт
• Улучшен интерфейс настроек системы
• Добавлены горячие клавиши
• Информация в логе разделена запятыми

Версия 1.3.2 (26.03.2018)

• Исправлена проверка простоя

Версия 1.3.1 (23.03.2018)

• В лог добавлена информация об времени с последней отметки

Версия 1.3 (20.03.2018)

• Отслеживание бездействия и запуск внешней команды, если оно зафиксировано (можно использовать для оповещения по почте)
• Улучшено распознавание ключей: набранный код сбрасывается быстрей, и проверяется не нажата ли это клавиша Enter, которая давала ложное срабатывание
• В Logger теперь есть завершение работы, скрытое от пользователя
• Журнал сервера теперь тоже записывает информацию о незарегистрированных контрольных точках и ключах

Версия 1.2 (06.03.2018)

• Журнал считываний в клиенте
• Лог событий клиента
• Улучшена стабильность чтения ключей в клиенте
• Окно настроек клиента
• Запрет пользователю закрывать клиент
• Дополнительная проверка правильности ввода кода ключа
• Открытие фото по двойному щелчку в списке событий

Версия 1.1 (16.02.2018)

• Считывание ключа на клиенте без активной формы
• Изменено количество байт ключа
• Запрет запуска второго экземпляра клиента
• Фильтрация событий по контрольным точкам
• Фильтрация событий по пользователям
• Тест камеры в параметрах контрольных точек

Версия 1.0 (07.02.2018)

• Редактирование списка пользователей
• Редактирование списка контрольных точек
• Сбор сведений с контрольных точек
• Снимок с камеры видеонаблюдения
• Просмотр журнала по датам
• Просмотр фото</value>
  </data>
  <data name="richTextBoxHelp.Text" xml:space="preserve">
    <value>Gazer - это электронный журнал присутствия. Сбор сведений о присутствии сотрудников предприятия в контрольных точках и просмотр журнала администратором системы. 

Gazer состоит из трёх компонентов: Admin, Logger и Server.

Gazer Admin - лицо системы, приложение для настройки и просмотра собранных сведений.

Gazer Logger - приложение контрольной точки. Фиксирует данные. В зависимости от настройки точки может опрашивать результат проверки для контролёров ОТК. С версии 1.2 в программе появилось окно настроек, вызывается оно двойным щелчком по строке статуса.

Gazer Server - центральный узел системы. Собирает данные, хранит настройки о пользователях и контрольных точках.

Порт, используемый для связи по умолчанию: 8081</value>
  </data>
</root>